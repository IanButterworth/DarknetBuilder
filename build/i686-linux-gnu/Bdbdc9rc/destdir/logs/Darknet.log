`/bin/bash -c "alias ll='ls -la'

vecho() {
    if [[ \"true\" == \"true\" ]]; then
        echo \"\$@\"
    fi
}
vecho_red() {
    (vecho \"\$@\" >&2)
}

# Save bash history (and optionally echo it out as it happens)
save_history() {
    vecho_red \" ---> \$BASH_COMMAND\"
    history -s \"\$BASH_COMMAND\"
    history -a
}

# Save our environment into \`/meta/.env\`, eliminating read-only variables
# so that this file can be sourced upon entering a debug shell.
save_env() {
    set +x
    set > /meta/.env
    # Ignore read-only variables
    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do
        grep -v \"^\$l=\" /meta/.env > /meta/.env2
        mv /meta/.env2 /meta/.env
    done
    echo \"cd \$(pwd)\" >> /meta/.env
}

# We do a little sleight-of-hand here; we want to build inside of a tmpfs
# because \`srcdir\` might be mapped in through a networked filesystem, which
# totally wrecks our I/O performance.  So what we do instead is bind-mount
# \`srcdir\` to another location so that we can always get at it, copy its
# contents to a new tmpfs we mount at the location of \`srcdir\`, then when
# we exit on an error, we copy everything back over again
tmpify_srcdir() {
    vecho \"Copying srcdir to tmpfs...\"
    mkdir -p \$WORKSPACE/.true_srcdir
    mount --bind \$WORKSPACE/srcdir \$WORKSPACE/.true_srcdir
    mount -t tmpfs tmpfs \$WORKSPACE/srcdir
    rsync -rlptD \$WORKSPACE/.true_srcdir/ \$WORKSPACE/srcdir

    # We may have changed what pwd() means out from underneath ourselves
    cd \$(pwd)
}

# Copy our tmpfs version of \`srcdir\` back onto disk.
save_srcdir() {
    vecho_red \"Saving srcdir due to previous error...\"
    rsync -rlptD \$WORKSPACE/srcdir/ \$WORKSPACE/.true_srcdir --delete
}

# If /meta is mounted, then we want to save history and environment
if [[ -d /meta ]]; then
    trap save_history DEBUG
    trap \"save_env\" EXIT
    trap \"save_env; save_srcdir\" INT TERM ERR
fi

# Stop if we hit any errors.
set -e

# Swap out srcdir from underneath our feet
tmpify_srcdir

cd \$WORKSPACE/srcdir/darknet-*

./configure --prefix=\$prefix --host=\$target
make -j\${nproc}
make install

"`
verbose sandbox enabled (running in privileged container mode)
Parsed --rootfs as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu"
Parsed --cd as "/workspace/srcdir"
Parsed --workspace as "/home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc" -> "/workspace"
Parsed --workspace as "/home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc/metadir" -> "/meta"
Parsed --map as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-i686-linux-gnu.v2018.11.11.x86_64-linux-gnu" -> "/opt/i686-linux-gnu/BaseCompilerShard-2018.11.11"
Parsed --map as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-i686-linux-gnu.v4.8.5.x86_64-linux-gnu" -> "/opt/i686-linux-gnu/GCC-4.8.5"
Parsed --map as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/LLVM.v6.0.1-0.x86_64-linux-gnu" -> "/opt/x86_64-linux-gnu/LLVM-6.0.1-0"
Parsed --map as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-x86_64-linux-gnu.v2018.11.11.x86_64-linux-gnu" -> "/opt/x86_64-linux-gnu/BaseCompilerShard-2018.11.11"
Parsed --map as "/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-x86_64-linux-gnu.v4.8.5.x86_64-linux-gnu" -> "/opt/x86_64-linux-gnu/GCC-4.8.5"
--> Creating overlay workdir at /proc
--> Mounting overlay of /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu (modifications in /proc/upper/rootfs, workspace in /proc/work/rootfs)
--> mapping /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-x86_64-linux-gnu.v4.8.5.x86_64-linux-gnu to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/GCC-4.8.5
--> mapping /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-x86_64-linux-gnu.v2018.11.11.x86_64-linux-gnu to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/BaseCompilerShard-2018.11.11
--> mapping /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/LLVM.v6.0.1-0.x86_64-linux-gnu to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/LLVM-6.0.1-0
--> mapping /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-i686-linux-gnu.v4.8.5.x86_64-linux-gnu to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/i686-linux-gnu/GCC-4.8.5
--> mapping /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-i686-linux-gnu.v2018.11.11.x86_64-linux-gnu to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/i686-linux-gnu/BaseCompilerShard-2018.11.11
--> Mounting overlay of /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/i686-linux-gnu/BaseCompilerShard-2018.11.11:/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/i686-linux-gnu/GCC-4.8.5 at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/i686-linux-gnu (modifications in /proc/upper/i686-linux-gnu, workspace in /proc/work/i686-linux-gnu)
--> Mounting overlay of /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/LLVM-6.0.1-0:/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/BaseCompilerShard-2018.11.11:/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu/GCC-4.8.5 at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/opt/x86_64-linux-gnu (modifications in /proc/upper/x86_64-linux-gnu, workspace in /proc/work/x86_64-linux-gnu)
--> Mounting procfs at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/proc
--> Mounting /dev/null at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/null
--> Mounting /dev/tty at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/tty
--> Mounting /dev/urandom at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/urandom
--> workspacing /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc/metadir to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/meta
--> workspacing /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/workspace
--> Mounting procfs at /proc
About to run `/bin/bash` `-c` `alias ll='ls -la'

vecho() {
    if [[ "true" == "true" ]]; then
        echo "$@"
    fi
}
vecho_red() {
    (vecho "$@" >&2)
}

# Save bash history (and optionally echo it out as it happens)
save_history() {
    vecho_red " ---> $BASH_COMMAND"
    history -s "$BASH_COMMAND"
    history -a
}

# Save our environment into `/meta/.env`, eliminating read-only variables
# so that this file can be sourced upon entering a debug shell.
save_env() {
    set +x
    set > /meta/.env
    # Ignore read-only variables
    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do
        grep -v "^$l=" /meta/.env > /meta/.env2
        mv /meta/.env2 /meta/.env
    done
    echo "cd $(pwd)" >> /meta/.env
}

# We do a little sleight-of-hand here; we want to build inside of a tmpfs
# because `srcdir` might be mapped in through a networked filesystem, which
# totally wrecks our I/O performance.  So what we do instead is bind-mount
# `srcdir` to another location so that we can always get at it, copy its
# contents to a new tmpfs we mount at the location of `srcdir`, then when
# we exit on an error, we copy everything back over again
tmpify_srcdir() {
    vecho "Copying srcdir to tmpfs..."
    mkdir -p $WORKSPACE/.true_srcdir
    mount --bind $WORKSPACE/srcdir $WORKSPACE/.true_srcdir
    mount -t tmpfs tmpfs $WORKSPACE/srcdir
    rsync -rlptD $WORKSPACE/.true_srcdir/ $WORKSPACE/srcdir

    # We may have changed what pwd() means out from underneath ourselves
    cd $(pwd)
}

# Copy our tmpfs version of `srcdir` back onto disk.
save_srcdir() {
    vecho_red "Saving srcdir due to previous error..."
    rsync -rlptD $WORKSPACE/srcdir/ $WORKSPACE/.true_srcdir --delete
}

# If /meta is mounted, then we want to save history and environment
if [[ -d /meta ]]; then
    trap save_history DEBUG
    trap "save_env" EXIT
    trap "save_env; save_srcdir" INT TERM ERR
fi

# Stop if we hit any errors.
set -e

# Swap out srcdir from underneath our feet
tmpify_srcdir

cd $WORKSPACE/srcdir/darknet-*

./configure --prefix=$prefix --host=$target
make -j${nproc}
make install

` 
Copying srcdir to tmpfs...
 ---> trap "save_env" EXIT
 ---> trap "save_env; save_srcdir" INT TERM ERR
 ---> set -e
 ---> tmpify_srcdir
 ---> cd $WORKSPACE/srcdir/darknet-*
 ---> ./configure --prefix=$prefix --host=$target
/bin/bash: line 69: ./configure: No such file or directory
 ---> ./configure --prefix=$prefix --host=$target
 ---> save_srcdir
Saving srcdir due to previous error...
 ---> ./configure --prefix=$prefix --host=$target
11.11.x86_64-linux-gnu/proc
--> Mounting /dev/null at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/null
--> Mounting /dev/tty at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/tty
--> Mounting /dev/urandom at /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/dev/urandom
--> workspacing /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc/metadir to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/meta
--> workspacing /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc to /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/workspace
--> Mounting procfs at /proc
Child Process PID is 13857
--> Mapping 1000:1000 to root:root within container namespace
Child Process exited, exit code 127
