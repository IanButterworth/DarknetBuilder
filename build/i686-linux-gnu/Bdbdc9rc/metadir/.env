AR=/opt/i686-linux-gnu/bin/i686-linux-gnu-ar
AR_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ar
AS=/opt/i686-linux-gnu/bin/i686-linux-gnu-as
AS_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-as
BASH=/bin/bash
BASH_ALIASES=()
BASH_ARGC=()
BASH_ARGV=()
BASH_CMDS=()
BASH_COMMAND='./configure --prefix=$prefix --host=$target'
BASH_EXECUTION_STRING=$'alias ll=\'ls -la\'\n\nvecho() {\n    if [[ "true" == "true" ]]; then\n        echo "$@"\n    fi\n}\nvecho_red() {\n    (vecho "$@" >&2)\n}\n\n# Save bash history (and optionally echo it out as it happens)\nsave_history() {\n    vecho_red " ---> $BASH_COMMAND"\n    history -s "$BASH_COMMAND"\n    history -a\n}\n\n# Save our environment into `/meta/.env`, eliminating read-only variables\n# so that this file can be sourced upon entering a debug shell.\nsave_env() {\n    set +x\n    set > /meta/.env\n    # Ignore read-only variables\n    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do\n        grep -v "^$l=" /meta/.env > /meta/.env2\n        mv /meta/.env2 /meta/.env\n    done\n    echo "cd $(pwd)" >> /meta/.env\n}\n\n# We do a little sleight-of-hand here; we want to build inside of a tmpfs\n# because `srcdir` might be mapped in through a networked filesystem, which\n# totally wrecks our I/O performance.  So what we do instead is bind-mount\n# `srcdir` to another location so that we can always get at it, copy its\n# contents to a new tmpfs we mount at the location of `srcdir`, then when\n# we exit on an error, we copy everything back over again\ntmpify_srcdir() {\n    vecho "Copying srcdir to tmpfs..."\n    mkdir -p $WORKSPACE/.true_srcdir\n    mount --bind $WORKSPACE/srcdir $WORKSPACE/.true_srcdir\n    mount -t tmpfs tmpfs $WORKSPACE/srcdir\n    rsync -rlptD $WORKSPACE/.true_srcdir/ $WORKSPACE/srcdir\n\n    # We may have changed what pwd() means out from underneath ourselves\n    cd $(pwd)\n}\n\n# Copy our tmpfs version of `srcdir` back onto disk.\nsave_srcdir() {\n    vecho_red "Saving srcdir due to previous error..."\n    rsync -rlptD $WORKSPACE/srcdir/ $WORKSPACE/.true_srcdir --delete\n}\n\n# If /meta is mounted, then we want to save history and environment\nif [[ -d /meta ]]; then\n    trap save_history DEBUG\n    trap "save_env" EXIT\n    trap "save_env; save_srcdir" INT TERM ERR\nfi\n\n# Stop if we hit any errors.\nset -e\n\n# Swap out srcdir from underneath our feet\ntmpify_srcdir\n\ncd $WORKSPACE/srcdir/darknet-*\n\n./configure --prefix=$prefix --host=$target\nmake -j${nproc}\nmake install\n\n'
BASH_LINENO=([0]="1")
BASH_SOURCE=([0]="environment")
BASH_VERSION='4.4.19(1)-release'
BUILD_AR=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ar
BUILD_AS=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-as
BUILD_CC=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc
BUILD_CXX=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-g++
BUILD_DSYMUTIL=/opt/x86_64-linux-gnu/tools/llvm-dsymutil
BUILD_FC=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gfortran
BUILD_LD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ld
BUILD_LIPO=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-lipo
BUILD_NM=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-nm
BUILD_OBJCOPY=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objcopy
BUILD_OBJDUMP=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objdump
BUILD_RANLIB=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ranlib
BUILD_READELF=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-readelf
BUILD_STRIP=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-strip
CC=/opt/i686-linux-gnu/bin/i686-linux-gnu-gcc
CC_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc
CFLAGS=
CPPFLAGS=
CXX=/opt/i686-linux-gnu/bin/i686-linux-gnu-g++
CXX_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-g++
DIRSTACK=()
DSYMUTIL=/opt/x86_64-linux-gnu/tools/llvm-dsymutil
DSYMUTIL_FOR_BUILD=/opt/x86_64-linux-gnu/tools/llvm-dsymutil
FC=/opt/i686-linux-gnu/bin/i686-linux-gnu-gfortran
FC_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gfortran
FUNCNAME=([0]="save_env")
GROUPS=()
HISTFILE=/meta/.bash_history
HOSTAR=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ar
HOSTAS=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-as
HOSTCC=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gcc
HOSTCXX=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-g++
HOSTDSYMUTIL=/opt/x86_64-linux-gnu/tools/llvm-dsymutil
HOSTFC=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-gfortran
HOSTLD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ld
HOSTLIPO=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-lipo
HOSTNAME=ian-XPS-8700
HOSTNM=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-nm
HOSTOBJCOPY=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objcopy
HOSTOBJDUMP=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objdump
HOSTRANLIB=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ranlib
HOSTREADELF=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-readelf
HOSTSTRIP=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-strip
HOSTTYPE=x86_64
IFS=$' \t\n'
INSTALL_NAME_TOOL=/opt/i686-linux-gnu/bin/i686-linux-gnu-install_name_tool
LANG=en_US.UTF-8
LD=/opt/i686-linux-gnu/bin/i686-linux-gnu-ld
LDFLAGS=
LD_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ld
LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/local/lib:/usr/lib:/lib64:/lib:/opt/x86_64-linux-gnu/lib64:/opt/x86_64-linux-gnu/lib:/opt/x86_64-linux-gnu/x86_64-linux-gnu/lib64:/opt/x86_64-linux-gnu/x86_64-linux-gnu/lib:/opt/i686-linux-gnu/lib64:/opt/i686-linux-gnu/lib:/opt/i686-linux-gnu/i686-linux-gnu/lib64:/opt/i686-linux-gnu/i686-linux-gnu/lib:/workspace/destdir/lib64:/workspace/destdir/lib
LIBTOOL=/opt/i686-linux-gnu/bin/i686-linux-gnu-libtool
LIPO=/opt/i686-linux-gnu/bin/i686-linux-gnu-lipo
LIPO_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-lipo
LLVM_HOST_TARGET=x86_64-linux-gnu
LLVM_TARGET=i686-linux-gnu
LOGNAME=root
MACHTYPE=x86_64-alpine-linux-musl
NM=/opt/i686-linux-gnu/bin/i686-linux-gnu-nm
NM_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-nm
OBJCOPY=/opt/i686-linux-gnu/bin/i686-linux-gnu-objcopy
OBJCOPY_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objcopy
OBJDUMP=/opt/i686-linux-gnu/bin/i686-linux-gnu-objdump
OBJDUMP_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-objdump
OLDPWD=/workspace/srcdir
OPTERR=1
OPTIND=1
OSTYPE=linux-musl
OTOOL=/opt/i686-linux-gnu/bin/i686-linux-gnu-otool
PATH=/opt/i686-linux-gnu/bin:/opt/x86_64-linux-gnu/bin:/opt/x86_64-linux-gnu/tools:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/workspace/destdir/bin
PIPESTATUS=([0]="0")
PKG_CONFIG_PATH=/workspace/destdir/lib/pkgconfig:/workspace/destdir/share/pkgconfig
PKG_CONFIG_SYSROOT_DIR=/workspace/destdir
PS4='+ '
PWD=/workspace/srcdir/darknet-88cccfcad4f9591a429c1e71c88a42e0e81a5e80
RANLIB=/opt/i686-linux-gnu/bin/i686-linux-gnu-ranlib
RANLIB_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-ranlib
READELF=/opt/i686-linux-gnu/bin/i686-linux-gnu-readelf
READELF_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-readelf
SHELL=/bin/bash
SHLVL=1
STRIP=/opt/i686-linux-gnu/bin/i686-linux-gnu-strip
STRIP_FOR_BUILD=/opt/x86_64-linux-gnu/bin/x86_64-linux-gnu-strip
SUDO_COMMAND=$'/home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu/sandbox --verbose --rootfs /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/Rootfs.v2018.11.11.x86_64-linux-gnu --cd /workspace/srcdir --workspace /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc:/workspace --workspace /home/ian/Documents/GitHub/DarknetBuilder/build/i686-linux-gnu/Bdbdc9rc/metadir:/meta --map /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-i686-linux-gnu.v2018.11.11.x86_64-linux-gnu:/opt/i686-linux-gnu/BaseCompilerShard-2018.11.11 --map /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-i686-linux-gnu.v4.8.5.x86_64-linux-gnu:/opt/i686-linux-gnu/GCC-4.8.5 --map /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/LLVM.v6.0.1-0.x86_64-linux-gnu:/opt/x86_64-linux-gnu/LLVM-6.0.1-0 --map /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/BaseCompilerShard-x86_64-linux-gnu.v2018.11.11.x86_64-linux-gnu:/opt/x86_64-linux-gnu/BaseCompilerShard-2018.11.11 --map /home/ian/.julia/packages/BinaryBuilder/Rtp9p/deps/mounts/GCC-x86_64-linux-gnu.v4.8.5.x86_64-linux-gnu:/opt/x86_64-linux-gnu/GCC-4.8.5 -- /bin/bash -c alias ll=\'ls -la\'\n\nvecho() {\n    if [[ "true" == "true" ]]; then\n        echo "$@"\n    fi\n}\nvecho_red() {\n    (vecho "$@" >&2)\n}\n\n# Save bash history (and optionally echo it out as it happens)\nsave_history() {\n    vecho_red " ---> $BASH_COMMAND"\n    history -s "$BASH_COMMAND"\n    history -a\n}\n\n# Save our environment into `/meta/.env`, eliminating read-only variables\n# so that this file can be sourced upon entering a debug shell.\nsave_env() {\n    set +x\n    set > /meta/.env\n    # Ignore read-only variables\n    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS; do\n        grep -v "^$l=" /meta/.env > /meta/.env2\n        mv /meta/.env2 /meta/.env\n    done\n    echo "cd $(pwd)" >> /meta/.env\n}\n\n# We do a little sleight-of-hand here; we want to build inside of a tmpfs\n# because `srcdir` might be mapped in through a networked filesystem, which\n# totally wrecks our I/O performance.  So what we do instead is bind-mount\n# `srcdir` to another location so that we can always get at it, copy its\n# contents to a new tmpfs we mount at the location of `srcdir`, then when\n# we exit on an error, we copy everything back over again\ntmpify_srcdir() {\n    vecho "Copying srcdir to tmpfs..."\n    mkdir -p $WORKSPACE/.true_srcdir\n    mount --bind $WORKSPACE/srcdir $WORKSPACE/.true_srcdir\n    mount -t tmpfs tmpfs $WORKSPACE/srcdir\n    rsync -rlptD $WORKSPACE/.true_srcdir/ $WORKSPACE/srcdir\n\n    # We may have changed what pwd() means out from underneath ourselves\n    cd $(pwd)\n}\n\n# Copy our tmpfs version of `srcdir` back onto disk.\nsave_srcdir() {\n    vecho_red "Saving srcdir due to previous error..."\n    rsync -rlptD $WORKSPACE/srcdir/ $WORKSPACE/.true_srcdir --delete\n}\n\n# If /meta is mounted, then we want to save history and environment\nif [[ -d /meta ]]; then\n    trap save_history DEBUG\n    trap "save_env" EXIT\n    trap "save_env; save_srcdir" INT TERM ERR\nfi\n\n# Stop if we hit any errors.\nset -e\n\n# Swap out srcdir from underneath our feet\ntmpify_srcdir\n\ncd $WORKSPACE/srcdir/darknet-*\n\n./configure --prefix=$prefix --host=$target\nmake -j${nproc}\nmake install\n\n'
SUDO_GID=1000
SUDO_UID=1000
SUDO_USER=ian
TERM=screen
USER=root
USERNAME=root
WINDRES=/opt/i686-linux-gnu/bin/i686-linux-gnu-windres
WINMC=/opt/i686-linux-gnu/bin/i686-linux-gnu-winmc
WORKSPACE=/workspace
_=+x
dlext=so
l=SHELLOPTS
nbits=32
nproc=8
prefix=/workspace/destdir
proc_family=intel
target=i686-linux-gnu
save_env () 
{ 
    set +x;
    set > /meta/.env;
    for l in BASHOPTS BASH_VERSINFO UID EUID PPID SHELLOPTS;
    do
        grep -v "^$l=" /meta/.env > /meta/.env2;
        mv /meta/.env2 /meta/.env;
    done;
    echo "cd $(pwd)" >> /meta/.env
}
save_history () 
{ 
    vecho_red " ---> $BASH_COMMAND";
    history -s "$BASH_COMMAND";
    history -a
}
save_srcdir () 
{ 
    vecho_red "Saving srcdir due to previous error...";
    rsync -rlptD $WORKSPACE/srcdir/ $WORKSPACE/.true_srcdir --delete
}
tmpify_srcdir () 
{ 
    vecho "Copying srcdir to tmpfs...";
    mkdir -p $WORKSPACE/.true_srcdir;
    mount --bind $WORKSPACE/srcdir $WORKSPACE/.true_srcdir;
    mount -t tmpfs tmpfs $WORKSPACE/srcdir;
    rsync -rlptD $WORKSPACE/.true_srcdir/ $WORKSPACE/srcdir;
    cd $(pwd)
}
vecho () 
{ 
    if [[ "true" == "true" ]]; then
        echo "$@";
    fi
}
vecho_red () 
{ 
    ( vecho "$@" 1>&2 )
}
cd /workspace/srcdir/darknet-88cccfcad4f9591a429c1e71c88a42e0e81a5e80
