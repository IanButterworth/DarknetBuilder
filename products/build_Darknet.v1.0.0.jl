using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libdarknet"], :libdarknet),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/<repo owner>/<repo name>/releases/download/<tag>"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Darknet.v1.0.0.i686-linux-gnu.tar.gz", "921b5ec96eabb3e17bdb5801b9a022b713492a9d8d21b61312003f5919788fc2"),
    MacOS(:x86_64) => ("$bin_prefix/Darknet.v1.0.0.x86_64-apple-darwin14.tar.gz", "eea10170b2afdf7eb48498a23a07b176f139a656fc7176ba07365386c89bcc2e"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Darknet.v1.0.0.x86_64-linux-gnu.tar.gz", "31a0d3cfc395e0bc9e1cd91726a44a88e319b10f014539089dd258464627ed30"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
